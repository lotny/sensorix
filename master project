#include <OneWire.h>
#include <DallasTemperature.h>
#include <GPRS_Shield_Arduino.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#define VT_PIN A0 // voltage read-out

//GSM
#define PIN_TX    7
#define PIN_RX    8
#define BAUDRATE  9600
#define PHONE_NUMBER "+48608017206"
#define MESSAGE  "I am too cold."

bool messageSent = false;
float tolerance1 = 20.0;
float tolerance2 = 20.0;
int delayTime = 5000; //in miliseconds 180000

GPRS gprsTest(PIN_TX,PIN_RX,BAUDRATE);//RX,TX,BaudRate

//Temperature sensor
#define ONE_WIRE_BUS 2

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

// arrays to hold device address
DeviceAddress insideThermometer;

void setup() {
  
  //Temperature sensor
  // start serial port
  Serial.begin(9600);
  //Serial.println("Dallas Temperature IC Control Library Demo");

  // locate devices on the bus
  //Serial.print("Locating devices...");
  sensors.begin();
  //Serial.print("Found ");
  //Serial.print(sensors.getDeviceCount(), DEC);
  //Serial.println(" devices.");

  // report parasite power requirements
  //Serial.print("Parasite power is: "); 
  // if (sensors.isParasitePowerMode()) Serial.println("ON");
  // else Serial.println("OFF");
  
  if (!sensors.getAddress(insideThermometer, 0)) Serial.println("Unable to find address for Device 0"); 
  
  // show the addresses we found on the bus
  //Serial.print("Device 0 Address: ");
  //printAddress(insideThermometer);
  //Serial.println();

  // set the resolution to 9 bit (Each Dallas/Maxim device is capable of several different resolutions)
  sensors.setResolution(insideThermometer, 9);
 
  Serial.print("Device 0 Resolution: ");
  Serial.print(sensors.getResolution(insideThermometer), DEC); 
  Serial.println();
}

// function to print the temperature for a device
float printTemperature(DeviceAddress deviceAddress)
{
  float tempC = sensors.getTempC(deviceAddress);
  
  return tempC;
}
/*
 * Main function. It will request the tempC from the sensors and display on Serial.
 */
void loop(void)
{ 
  // call sensors.requestTemperatures() to issue a global temperature 
  // request to all devices on the bus
  // Serial.print("Requesting temperatures...");
  // sensors.requestTemperatures(); // Send the command to get temperatures
  // Serial.println("DONE");
  int vt_read = analogRead(VT_PIN);
  float voltage = vt_read * (5.0 / 1024.0) * 5.0;
  if (voltage == 0)
  {
    Serial.print("Voltage is 0.");
  }
  
  // It responds almost immediately. Let's print out the data
  sensors.requestTemperatures();
  float tempC = printTemperature(insideThermometer); // Use a simple function to print out the data

  Serial.println("Checking temperature.");
  Serial.println(tempC);
  
  if (tempC > tolerance1 && messageSent == false)
  {
    Serial.println(tempC);
      //GPS module
    while(!gprsTest.init()) {
        delay(1000);
        Serial.print("init error\r\n");
    }
    Serial.println("gprs init success");
    Serial.println("start to send message ...");
    gprsTest.sendSMS(PHONE_NUMBER,MESSAGE); //define phone number and text
    messageSent = true;
  }
delay(delayTime);
}

void getLog(void)
{
 
}
void getStatus(void)
{
  
}
void changeTemp1(float temp)
{
 tolerance1 = temp;
}
void changeTemp2(float temp)
{
 tolerance2 = temp;
}
void changeDelay(int dTime)
{
  delayTime = dTime;
}


/*
// function to print a device address
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}*/
